from collections import deque

from async_examples.async_basics import fibb, make_predicate, async_numba_search

__doc__ = """
This entire module has been shamelessly stolen from Robert Smallshire's
talk on asyncio during the 2017 "NDC{London}" conference.

Link to video: https://youtu.be/M-UcUs7IMIM
"""

# Very thin wrapper around jobs.
# Essentially it just gives our `async_numba_search()` a unique id.
class Task(object):
    next_id = 0

    def __init__(self, routine):
        self.id = Task.next_id
        Task.next_id += 1
        self.routine = routine


# HERE B DRAGONS(...slash this class shows how to exploit non-blocking functions.)
class Scheduler(object):
    """`Scheduler()` is just a fancy queue."""

    def __init__(self):
        self.runnable_tasks = deque()
        self.completed_task_results = {}
        self.failed_task_results = {}

    def add(self, routine):
        task = Task(routine)
        self.runnable_tasks.append(task)
        return task.id

    def run_to_completion(self):
        while len(self.runnable_tasks) != 0:
            task = self.runnable_tasks.popleft()
            print("Running task {}, ".format(task.id), end='')
            try:
                yielded = next(task.routine)
            except StopIteration as stopped:
                print("search completed with result: {!r}".format(stopped.value))
                self.completed_task_results[task.id] = stopped.value
            except Exception as some_exception:
                print('search failed with exception: {}'.format(some_exception))
                self.failed_task_results[task.id] = some_exception
            else:
                # sanity-check
                assert yielded == 'Searching...'
                print(yielded)
                self.runnable_tasks.append(task)

if __name__ == '__main__':
    scheduler = Scheduler()
    scheduler.add(async_numba_search(fibb(), make_predicate(3)))
    scheduler.add(async_numba_search(fibb(), make_predicate(5)))
    scheduler.run_to_completion()




__MODULE_OUTPUT = """
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, Searching...
        Running task 1, Searching...
        Running task 0, search completed with result: 144
        Running task 1, Searching...
        Running task 1, Searching...
        Running task 1, Searching...
        Running task 1, Searching...
        Running task 1, Searching...
        Running task 1, Searching...
        Running task 1, Searching...
        Running task 1, Searching...
        Running task 1, Searching...
        Running task 1, search completed with result: 10946
"""
